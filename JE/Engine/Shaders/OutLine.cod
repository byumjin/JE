//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
    float2  gTextureSize;               // Offset:  128, size:    8
}

//
// 8 local object(s)
//
SamplerState TextureSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ShadowTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState TextureMipSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState LUTSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ObjTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(8);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D StencilTexture;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 FillSilhouetteTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float2 gTextureSize;               // Offset:  128 Size:     8 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                mov r0.xy, v2.xyxx
                mov r2.xyzw, v1.xyzw
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                // COLOR                    0   xyzw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   x           0   TARGET   float   x   
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.x
                mov o0.x, l(1.000000)
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 OutLineTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64 [unused]
                //   float2 gTextureSize;               // Offset:  128 Size:     8 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, v2.xyxx
                mov r2.xyzw, v1.xyzw
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64 [unused]
                //   float2 gTextureSize;               // Offset:  128 Size:     8
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // TextureSampler                    sampler      NA          NA             s0      1 
                // StencilTexture                    texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[9], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                div r0.x, l(1.000000), cb0[8].x
                div r1.w, l(1.000000), cb0[8].y
                mul r2.x, r0.x, l(2.000000)
                mul r3.y, r1.w, l(2.000000)
                sample_indexable(texture2d)(float,float,float,float) r3.w, v1.xyxx, t0.yzwx, s0
                ge r3.w, r3.w, l(1.000000)
                mov o0.xyzw, l(0,0.500000,1.000000,0.200000)
                retc_nz r3.w
                mov r4.x, -r2.x
                mov r4.y, -r3.y
                add r4.xy, r4.xyxx, v1.xyxx
                lt r3.w, r4.x, l(0.000000)
                lt r4.z, r4.y, l(0.000000)
                or r3.w, r3.w, r4.z
                mov r4.z, l(0)
                sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t0.xyzw, s0
                ge r4.x, r4.x, l(1.000000)
                movc r3.w, r3.w, r4.z, r4.x
                mov r4.x, -r2.x
                mov r4.y, l(0)
                add r4.xy, r4.xyxx, v1.xyxx
                lt r4.z, r4.x, l(0.000000)
                lt r4.w, r4.y, l(0.000000)
                or r4.z, r4.w, r4.z
                mov r4.w, l(0)
                sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t0.xyzw, s0
                ge r4.x, r4.x, l(1.000000)
                movc r4.x, r4.z, r4.w, r4.x
                or r3.w, r3.w, r4.x
                mov r3.x, -r2.x
                add r4.xy, r3.xyxx, v1.xyxx
                lt r3.x, r4.x, l(0.000000)
                lt r4.z, r4.y, l(0.000000)
                or r3.x, r3.x, r4.z
                mov r4.z, l(0)
                sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t0.xyzw, s0
                ge r4.x, r4.x, l(1.000000)
                movc r3.x, r3.x, r4.z, r4.x
                or r3.x, r3.x, r3.w
                mov r4.y, -r3.y
                mov r4.x, l(0)
                add r4.xy, r4.xyxx, v1.xyxx
                lt r3.w, r4.x, l(0.000000)
                lt r4.z, r4.y, l(0.000000)
                or r3.w, r3.w, r4.z
                mov r4.z, l(0)
                sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t0.xyzw, s0
                ge r4.x, r4.x, l(1.000000)
                movc r3.w, r3.w, r4.z, r4.x
                or r3.x, r3.w, r3.x
                mov r3.z, l(0)
                add r3.zw, r3.zzzy, v1.xxxy
                lt r4.x, r3.z, l(0.000000)
                lt r4.y, r3.w, l(0.000000)
                or r4.x, r4.y, r4.x
                mov r4.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r3.z, r3.zwzz, t0.yzxw, s0
                ge r3.z, r3.z, l(1.000000)
                movc r3.z, r4.x, r4.y, r3.z
                or r3.x, r3.z, r3.x
                mov r2.y, -r3.y
                add r3.zw, r2.xxxy, v1.xxxy
                lt r2.y, r3.z, l(0.000000)
                lt r4.x, r3.w, l(0.000000)
                or r2.y, r2.y, r4.x
                mov r4.x, l(0)
                sample_indexable(texture2d)(float,float,float,float) r3.z, r3.zwzz, t0.yzxw, s0
                ge r3.z, r3.z, l(1.000000)
                movc r2.y, r2.y, r4.x, r3.z
                or r2.y, r2.y, r3.x
                mov r2.z, l(0)
                add r3.xz, r2.xxzx, v1.xxyx
                lt r2.z, r3.x, l(0.000000)
                lt r3.w, r3.z, l(0.000000)
                or r2.z, r2.z, r3.w
                mov r3.w, l(0)
                sample_indexable(texture2d)(float,float,float,float) r3.x, r3.xzxx, t0.xyzw, s0
                ge r3.x, r3.x, l(1.000000)
                movc r2.z, r2.z, r3.w, r3.x
                or r2.y, r2.z, r2.y
                mov r2.w, r3.y
                add r3.xz, r2.xxwx, v1.xxyx
                lt r2.z, r3.x, l(0.000000)
                lt r3.w, r3.z, l(0.000000)
                or r2.z, r2.z, r3.w
                mov r3.w, l(0)
                sample_indexable(texture2d)(float,float,float,float) r3.x, r3.xzxx, t0.xyzw, s0
                ge r3.x, r3.x, l(1.000000)
                movc r2.z, r2.z, r3.w, r3.x
                or r2.y, r2.z, r2.y
                mov r4.x, -r0.x
                mov r4.y, -r3.y
                add r3.xz, r4.xxyx, v1.xxyx
                lt r2.z, r3.x, l(0.000000)
                lt r3.w, r3.z, l(0.000000)
                or r2.z, r2.z, r3.w
                mov r3.w, l(0)
                sample_indexable(texture2d)(float,float,float,float) r3.x, r3.xzxx, t0.xyzw, s0
                ge r3.x, r3.x, l(1.000000)
                movc r2.z, r2.z, r3.w, r3.x
                or r2.y, r2.z, r2.y
                mov r0.y, -r3.y
                add r3.xy, r0.xyxx, v1.xyxx
                lt r0.y, r3.x, l(0.000000)
                lt r2.z, r3.y, l(0.000000)
                or r0.y, r0.y, r2.z
                mov r2.z, l(0)
                sample_indexable(texture2d)(float,float,float,float) r3.x, r3.xyxx, t0.xyzw, s0
                ge r3.x, r3.x, l(1.000000)
                movc r0.y, r0.y, r2.z, r3.x
                or r0.y, r0.y, r2.y
                mov r3.x, -r2.x
                mov r3.y, -r1.w
                add r2.yz, r3.xxyx, v1.xxyx
                lt r3.x, r2.y, l(0.000000)
                lt r3.y, r2.z, l(0.000000)
                or r3.x, r3.y, r3.x
                mov r3.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t0.yxzw, s0
                ge r2.y, r2.y, l(1.000000)
                movc r2.y, r3.x, r3.y, r2.y
                or r0.y, r0.y, r2.y
                mov r1.z, -r2.x
                add r2.yz, r1.zzwz, v1.xxyx
                lt r3.x, r2.y, l(0.000000)
                lt r3.y, r2.z, l(0.000000)
                or r3.x, r3.y, r3.x
                mov r3.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t0.yxzw, s0
                ge r2.y, r2.y, l(1.000000)
                movc r2.y, r3.x, r3.y, r2.y
                or r0.y, r0.y, r2.y
                mov r1.x, -r1.w
                mov r1.y, r2.x
                add r2.xy, r1.yxyy, v1.xyxx
                lt r2.z, r2.x, l(0.000000)
                lt r3.x, r2.y, l(0.000000)
                or r2.z, r2.z, r3.x
                mov r3.x, l(0)
                sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.xyzw, s0
                ge r2.x, r2.x, l(1.000000)
                movc r2.x, r2.z, r3.x, r2.x
                or r0.y, r0.y, r2.x
                add r2.xy, r1.ywyy, v1.xyxx
                lt r2.z, r2.x, l(0.000000)
                lt r3.x, r2.y, l(0.000000)
                or r2.z, r2.z, r3.x
                mov r3.x, l(0)
                sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.xyzw, s0
                ge r2.x, r2.x, l(1.000000)
                movc r2.x, r2.z, r3.x, r2.x
                or r0.y, r0.y, r2.x
                mov r0.z, -r0.x
                mov r0.w, r2.w
                add r2.xy, r0.zwzz, v1.xyxx
                lt r0.z, r2.x, l(0.000000)
                lt r2.z, r2.y, l(0.000000)
                or r0.z, r0.z, r2.z
                mov r2.z, l(0)
                sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.xyzw, s0
                ge r2.x, r2.x, l(1.000000)
                movc r0.z, r0.z, r2.z, r2.x
                or r0.y, r0.z, r0.y
                add r0.zw, r0.xxxw, v1.xxxy
                lt r2.x, r0.z, l(0.000000)
                lt r2.y, r0.w, l(0.000000)
                or r2.x, r2.y, r2.x
                mov r2.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t0.yzxw, s0
                ge r0.z, r0.z, l(1.000000)
                movc r0.z, r2.x, r2.y, r0.z
                or r0.y, r0.z, r0.y
                mov r2.x, -r0.x
                mov r2.y, -r1.w
                add r0.zw, r2.xxxy, v1.xxxy
                lt r2.x, r0.z, l(0.000000)
                lt r2.y, r0.w, l(0.000000)
                or r2.x, r2.y, r2.x
                mov r2.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t0.yzxw, s0
                ge r0.z, r0.z, l(1.000000)
                movc r0.z, r2.x, r2.y, r0.z
                or r0.y, r0.z, r0.y
                mov r2.x, -r0.x
                mov r2.y, l(0)
                add r0.zw, r2.xxxy, v1.xxxy
                lt r2.x, r0.z, l(0.000000)
                lt r2.y, r0.w, l(0.000000)
                or r2.x, r2.y, r2.x
                mov r2.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t0.yzxw, s0
                ge r0.z, r0.z, l(1.000000)
                movc r0.z, r2.x, r2.y, r0.z
                or r0.y, r0.z, r0.y
                mov r1.x, -r0.x
                add r0.zw, r1.xxxw, v1.xxxy
                lt r2.x, r0.z, l(0.000000)
                lt r2.y, r0.w, l(0.000000)
                or r2.x, r2.y, r2.x
                mov r2.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t0.yzxw, s0
                ge r0.z, r0.z, l(1.000000)
                movc r0.z, r2.x, r2.y, r0.z
                or r0.y, r0.z, r0.y
                mov r2.y, -r1.w
                mov r2.x, l(0)
                add r0.zw, r2.xxxy, v1.xxxy
                lt r2.x, r0.z, l(0.000000)
                lt r2.y, r0.w, l(0.000000)
                or r2.x, r2.y, r2.x
                mov r2.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t0.yzxw, s0
                ge r0.z, r0.z, l(1.000000)
                movc r0.z, r2.x, r2.y, r0.z
                or r0.y, r0.z, r0.y
                mov r1.y, l(0)
                add r0.zw, r1.yyyw, v1.xxxy
                lt r2.x, r0.z, l(0.000000)
                lt r2.y, r0.w, l(0.000000)
                or r2.x, r2.y, r2.x
                mov r2.y, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t0.yzxw, s0
                ge r0.z, r0.z, l(1.000000)
                movc r0.z, r2.x, r2.y, r0.z
                or r0.y, r0.z, r0.y
                mov r1.x, -r1.w
                mov r1.y, r0.x
                add r0.xz, r1.yyxy, v1.xxyx
                lt r0.w, r0.x, l(0.000000)
                lt r1.x, r0.z, l(0.000000)
                or r0.w, r0.w, r1.x
                mov r1.x, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xzxx, t0.xyzw, s0
                ge r0.x, r0.x, l(1.000000)
                movc r0.x, r0.w, r1.x, r0.x
                or r0.x, r0.x, r0.y
                mov r1.z, l(0)
                add r0.yz, r1.yyzy, v1.xxyx
                lt r0.w, r0.y, l(0.000000)
                lt r1.x, r0.z, l(0.000000)
                or r0.w, r0.w, r1.x
                mov r1.x, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.yxzw, s0
                ge r0.y, r0.y, l(1.000000)
                movc r0.y, r0.w, r1.x, r0.y
                or r0.x, r0.y, r0.x
                add r0.yz, r1.yywy, v1.xxyx
                lt r0.w, r0.y, l(0.000000)
                lt r1.x, r0.z, l(0.000000)
                or r0.w, r0.w, r1.x
                mov r1.x, l(0)
                sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.yxzw, s0
                ge r0.y, r0.y, l(1.000000)
                movc r0.y, r0.w, r1.x, r0.y
                or r0.x, r0.y, r0.x
                if_nz r0.x
                  mov o0.xyzw, l(1.000000,0.500000,0,1.000000)
                  ret 
                else 
                  mov o0.xyzw, l(0,0,0,0)
                  ret 
                endif 
                ret 
                // Approximately 263 instruction slots used
                            
            };
        }

    }

}

