//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   32
    float4x4 gWorld;                    // Offset:   32, size:   64
    float4x4 gViewProj;                 // Offset:   96, size:   64
    float4x4 gWorldViewProj;            // Offset:  160, size:   64
    float4x4 gWorldInvTranspose;        // Offset:  224, size:   64
    float4x4 gInvViewProj;              // Offset:  288, size:   64
    float4x4 gInvProj;                  // Offset:  352, size:   64
    float3  gEyePosW;                   // Offset:  416, size:   12
    float   gTime;                      // Offset:  428, size:    4
    float4x4 gShadowVP;                 // Offset:  432, size:   64
    float4x4 gInvDepthViewProj;         // Offset:  496, size:   64
}

//
// 14 local object(s)
//
SamplerState TextureSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ShadowTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState TextureMipSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState LUTSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ObjTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(8);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D BasicColorTexture;
Texture2D SpecularTexture;
Texture2D NormalTexture;
Texture2D ReflectionTexture;
Texture2D DepthInfoTexture;
Texture2D BRDFLUTTexture;
Texture2D ShadowTexture;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 DirLightsTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Color;                  // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float Pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32 [unused]
                //   float4x4 gWorld;                   // Offset:   32 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   96 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  160 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:  224 Size:    64 [unused]
                //   float4x4 gInvViewProj;             // Offset:  288 Size:    64 [unused]
                //   float4x4 gInvProj;                 // Offset:  352 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  416 Size:    12 [unused]
                //   float gTime;                       // Offset:  428 Size:     4 [unused]
                //   float4x4 gShadowVP;                // Offset:  432 Size:    64 [unused]
                //   float4x4 gInvDepthViewProj;        // Offset:  496 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[10], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[6].xyzw
                dp4 r1.y, r0.xyzw, cb0[7].xyzw
                dp4 r1.z, r0.xyzw, cb0[8].xyzw
                dp4 r1.w, r0.xyzw, cb0[9].xyzw
                mov r0.xy, v2.xyxx
                mov r2.xyzw, v1.xyzw
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Color;                  // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float Pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32
                //   float4x4 gWorld;                   // Offset:   32 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   96 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  160 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:  224 Size:    64 [unused]
                //   float4x4 gInvViewProj;             // Offset:  288 Size:    64 [unused]
                //   float4x4 gInvProj;                 // Offset:  352 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  416 Size:    12
                //   float gTime;                       // Offset:  428 Size:     4 [unused]
                //   float4x4 gShadowVP;                // Offset:  432 Size:    64
                //   float4x4 gInvDepthViewProj;        // Offset:  496 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // TextureSampler                    sampler      NA          NA             s0      1 
                // ShadowTextureSampler              sampler      NA          NA             s1      1 
                // TextureMipSampler                 sampler      NA          NA             s2      1 
                // LUTSampler                        sampler      NA          NA             s3      1 
                // BasicColorTexture                 texture  float4          2d             t0      1 
                // SpecularTexture                   texture  float4          2d             t1      1 
                // NormalTexture                     texture  float4          2d             t2      1 
                // ReflectionTexture                 texture  float4          2d             t3      1 
                // DepthInfoTexture                  texture  float4          2d             t4      1 
                // BRDFLUTTexture                    texture  float4          2d             t5      1 
                // ShadowTexture                     texture  float4          2d             t6      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[35], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_sampler s2, mode_default
                dcl_sampler s3, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 9
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t2.xyzw, s0
                mul r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000)
                mov r2.xyzw, l(-1.000000,-1.000000,-1.000000,-1.000000)
                add r1.xyzw, r1.xyzw, r2.xyzw
                sample_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.xyzw, s0
                mov r0.w, r0.w
                lt r1.w, r1.w, l(-1.000000)
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                retc_nz r1.w
                dp3 r1.w, cb0[1].xyzx, cb0[1].xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, cb0[1].xyzx
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r1.xyzx
                max r1.w, r1.w, l(0.000000)
                min r1.w, r1.w, l(1.000000)
                sample_indexable(texture2d)(float,float,float,float) r3.xy, v1.xyxx, t4.zwxy, s0
                mov r3.xy, r3.xyxx
                div r4.z, r3.x, r3.y
                mov r3.zw, v1.xxxy
                mul r2.w, r3.z, l(2.000000)
                mov r3.z, l(-1.000000)
                add r4.x, r2.w, r3.z
                mov r2.w, -r3.w
                add r2.w, r2.w, l(1.000000)
                mul r2.w, r2.w, l(2.000000)
                mov r3.z, l(-1.000000)
                add r4.y, r2.w, r3.z
                mov r4.w, l(1.000000)
                mul r4.xyzw, r3.yyyy, r4.xyzw
                dp4 r5.x, r4.xyzw, cb0[31].xyzw
                dp4 r5.y, r4.xyzw, cb0[32].xyzw
                dp4 r5.z, r4.xyzw, cb0[33].xyzw
                dp4 r5.w, r4.xyzw, cb0[34].xyzw
                mov r3.yzw, -r5.xxyz
                add r3.yzw, r3.yyzw, cb0[26].xxyz
                dp3 r2.w, r3.yzwy, r3.yzwy
                rsq r2.w, r2.w
                mul r3.yzw, r2.wwww, r3.yyzw
                add r4.xyz, r2.xyzx, r3.yzwy
                dp3 r2.w, r4.xyzx, r4.xyzx
                rsq r2.w, r2.w
                mul r4.xyz, r2.wwww, r4.xyzx
                sample_indexable(texture2d)(float,float,float,float) r6.xyzw, v1.xyxx, t1.xyzw, s0
                max r2.w, r6.w, l(0.050000)
                min r2.w, r2.w, l(0.950000)
                mul r4.w, r2.w, l(3.141592)
                sincos r4.w, null, r4.w
                sqrt r6.w, r2.w
                sqrt r6.w, r6.w
                mov r7.x, -r2.w
                add r6.w, r6.w, r7.x
                mul r4.w, r4.w, r6.w
                add r7.z, r2.w, r4.w
                dp4 r2.w, r5.xyzw, cb0[27].xyzw
                dp4 r4.w, r5.xyzw, cb0[28].xyzw
                dp4 r5.x, r5.xyzw, cb0[29].xyzw
                add r2.w, r2.w, l(1.000000)
                mul r8.x, r2.w, l(0.500000)
                add r2.w, r4.w, l(1.000000)
                mul r2.w, r2.w, l(0.500000)
                mov r2.w, -r2.w
                add r8.y, r2.w, l(1.000000)
                dp3 r2.x, r2.xyzx, r4.xyzx
                max r2.x, r2.x, l(0.000000)
                min r7.y, r2.x, l(1.000000)
                dp3 r2.x, r1.xyzx, r3.yzwy
                max r2.x, r2.x, l(0.000000)
                min r7.x, r2.x, l(1.000000)
                mul r2.x, r7.z, l(0.800000)
                mov r2.x, -r2.x
                add r2.x, r2.x, l(1.000000)
                mul r2.y, r7.z, l(0.200000)
                mov r2.y, -r2.y
                add r2.y, r2.y, l(1.000000)
                mov r1.xyz, r1.xyzx
                mov r4.xyz, r4.xyzx
                mov r2.z, r7.z
                mov r6.xyz, r6.xyzx
                sample_indexable(texture2d)(float,float,float,float) r3.yz, r7.yzyy, t5.xzwy, s3
                mov r3.yz, r3.yyzy
                dp3 r1.x, r1.xyzx, r4.xyzx
                max r1.x, r1.x, l(0.000000)
                min r1.x, r1.x, l(1.000000)
                mov r1.x, r1.x
                mul r1.y, r1.x, r1.x
                mul r1.y, r1.x, r1.y
                mul r1.x, r1.x, r1.y
                mov r1.x, r1.x
                mov r2.z, r2.z
                mul r1.y, r2.z, r2.z
                mul r1.y, r1.y, r1.y
                mul r1.x, r1.x, r1.x
                mov r1.z, l(-1.000000)
                add r1.z, r1.z, r1.y
                mul r1.x, r1.z, r1.x
                add r1.x, r1.x, l(1.000000)
                mul r1.z, r1.x, l(3.141593)
                mul r1.x, r1.x, r1.z
                div r1.x, r1.y, r1.x
                mov r1.x, r1.x
                mov r3.yz, r3.yyzy
                mov r6.xyz, r6.xyzx
                mul r4.xyz, r3.yyyy, r6.xyzx
                add r3.yzw, r3.zzzz, r4.xxyz
                mul r1.xyz, r1.xxxx, r3.yzwy
                mul r1.xyz, r2.xxxx, r1.xyzx
                sample_indexable(texture2d)(float,float,float,float) r2.zw, r7.xzxx, t5.zwxy, s3
                mov r2.zw, r2.zzzw
                sqrt r0.w, r0.w
                itof r3.y, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t3.xyzw, s2, r3.y
                mov r3.yzw, -r6.xxyz
                add r3.yzw, r0.xxyz, r3.yyzw
                mul r3.yzw, r0.wwww, r3.yyzw
                add r6.xyz, r3.yzwy, r6.xyzx
                mov r6.w, l(1.000000)
                mul r6.xyzw, r2.zzzz, r6.xyzw
                add r6.xyzw, r2.wwww, r6.xyzw
                mul r4.xyzw, r4.xyzw, r6.xyzw
                mov r2.z, -r2.x
                add r2.y, r2.z, r2.y
                mul r2.y, r0.w, r2.y
                add r2.x, r2.y, r2.x
                mul r2.xyzw, r2.xxxx, r4.xyzw
                mul r3.yzw, r0.xxyz, l(0.000000, 0.050000, 0.050000, 0.050000)
                mov r4.xyz, -r0.xyzx
                add r3.yzw, r3.yyzw, r4.xxyz
                mul r3.yzw, r0.wwww, r3.yyzw
                add r0.xyz, r0.xyzx, r3.yzwy
                add r4.xyz, r1.xyzx, r0.xyzx
                add r4.w, l(1.000000), l(1.000000)
                mul r1.xyzw, r1.wwww, r4.xyzw
                mov r0.x, l(-0.000000)
                add r0.x, r0.x, l(1.000000)
                mul r0.x, r0.x, r0.w
                add r0.x, r0.x, l(0.000000)
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                sample_indexable(texture2d)(float,float,float,float) r1.x, r8.xyxx, t6.xyzw, s1
                mul r1.y, r3.x, l(0.000010)
                add r1.x, r1.y, r1.x
                lt r1.x, r1.x, r5.x
                if_nz r1.x
                  itof r1.xyzw, l(0, 0, 0, 1)
                  mov r2.xyzw, -r1.xyzw
                  add r2.xyzw, r0.xyzw, r2.xyzw
                  mul r2.xyzw, r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
                  add o0.xyzw, r1.xyzw, r2.xyzw
                  ret 
                else 
                  mov o0.xyzw, r0.xyzw
                  ret 
                endif 
                ret 
                // Approximately 157 instruction slots used
                            
            };
        }

    }

}

