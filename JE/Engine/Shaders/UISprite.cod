//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gEyeWorldPos;               // Offset:    0, size:   12
    float4x4 gWorld;                    // Offset:   16, size:   64
    float4x4 gViewProj;                 // Offset:   80, size:   64
    float4x4 gWorldViewProj;            // Offset:  144, size:   64
    bool    bSelected;                  // Offset:  208, size:    4
}

//
// 8 local object(s)
//
SamplerState TextureSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ShadowTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState TextureMipSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState LUTSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ObjTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(8);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D UISpriteMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 UISpriteTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyeWorldPos;               // Offset:    0 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   16 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   80 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  144 Size:    64
                //   bool bSelected;                    // Offset:  208 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[9].xyzw
                dp4 r1.y, r0.xyzw, cb0[10].xyzw
                dp4 r1.z, r0.xyzw, cb0[11].xyzw
                dp4 r1.w, r0.xyzw, cb0[12].xyzw
                mov r0.xyzw, v1.xyzw
                mov r2.xy, v2.xyxx
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                mov o2.xy, r2.xyxx
                ret 
                // Approximately 12 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyeWorldPos;               // Offset:    0 Size:    12 [unused]
                //   float4x4 gWorld;                   // Offset:   16 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   80 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  144 Size:    64 [unused]
                //   bool bSelected;                    // Offset:  208 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // ObjTextureSampler                 sampler      NA          NA             s0      1 
                // UISpriteMap                       texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 3
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
                ine r1.x, l(0, 0, 0, 0), cb0[13].x
                mov r2.xyzw, -r0.xyzw
                add r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 1.000000, 1.000000)
                mul r2.xyzw, r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
                add o0.xyzw, r0.xyzw, r2.xyzw
                retc_nz r1.x
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

}

