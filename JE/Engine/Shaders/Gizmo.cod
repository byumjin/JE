//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
    float4x4 gOriginTranslation;        // Offset:  128, size:   64
    float   gLength;                    // Offset:  192, size:    4
    float   gSelectedAxis;              // Offset:  196, size:    4
}

//
// 7 local object(s)
//
SamplerState TextureSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ShadowTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState TextureMipSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState LUTSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ObjTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(8);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 AxisTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float4x4 gOriginTranslation;       // Offset:  128 Size:    64
                //   float gLength;                     // Offset:  192 Size:     4
                //   float gSelectedAxis;               // Offset:  196 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mul r0.xyz, v0.xyzx, cb0[12].xxxx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 r0.x, r1.xyzw, cb0[8].xyzw
                dp4 r0.y, r1.xyzw, cb0[9].xyzw
                dp4 r0.z, r1.xyzw, cb0[10].xyzw
                dp4 r0.w, r1.xyzw, cb0[11].xyzw
                mov r1.xy, v2.xyxx
                mov r2.xyzw, v1.xyzw
                mov o0.xyzw, r0.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 16 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                mov o0.xyzw, v2.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 TransTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float4x4 gOriginTranslation;       // Offset:  128 Size:    64
                //   float gLength;                     // Offset:  192 Size:     4
                //   float gSelectedAxis;               // Offset:  196 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float       
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v3.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_temps 6
                mul r0.xyz, v0.xyzx, cb0[12].xxxx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 r0.x, r1.xyzw, cb0[8].xyzw
                dp4 r0.y, r1.xyzw, cb0[9].xyzw
                dp4 r0.z, r1.xyzw, cb0[10].xyzw
                dp4 r0.w, r1.xyzw, cb0[11].xyzw
                mov r1.xyzw, v1.xyzw
                eq r2.x, cb0[12].y, l(1.000000)
                eq r2.y, r1.x, l(1.000000)
                mov r3.xyzw, l(1.000000,1.000000,0,1.000000)
                eq r2.z, r1.x, l(0.750000)
                if_nz r2.z
                  mov r4.xyzw, l(0.750000,0.750000,0,1.000000)
                else 
                  mov r4.xyzw, v1.xyzw
                endif 
                movc r3.xyzw, r2.yyyy, r3.xyzw, r4.xyzw
                eq r2.y, cb0[12].y, l(2.000000)
                if_nz r2.y
                  eq r2.y, r1.y, l(1.000000)
                  mov r4.xyzw, l(1.000000,1.000000,0,1.000000)
                  eq r2.z, r1.y, l(0.750000)
                  if_nz r2.z
                    mov r5.xyzw, l(0.750000,0.750000,0,1.000000)
                  else 
                    mov r5.xyzw, v1.xyzw
                  endif 
                  movc r1.xyzw, r2.yyyy, r4.xyzw, r5.xyzw
                else 
                  eq r2.y, cb0[12].y, l(3.000000)
                  if_nz r2.y
                    eq r2.y, r1.z, l(1.000000)
                    mov r4.xyzw, l(1.000000,1.000000,0,1.000000)
                    eq r2.z, r1.z, l(0.750000)
                    if_nz r2.z
                      mov r5.xyzw, l(0.750000,0.750000,0,1.000000)
                    else 
                      mov r5.xyzw, v1.xyzw
                    endif 
                    movc r1.xyzw, r2.yyyy, r4.xyzw, r5.xyzw
                  else 
                    eq r2.y, cb0[12].y, l(4.000000)
                    if_nz r2.y
                      eq r2.y, r1.x, l(0.750000)
                      mov r4.xyzw, l(1.000000,1.000000,0,1.000000)
                      mov r5.xyzw, v1.xyzw
                      movc r1.xyzw, r2.yyyy, r4.xyzw, r5.xyzw
                    endif 
                  endif 
                endif 
                movc r1.xyzw, r2.xxxx, r3.xyzw, r1.xyzw
                mov r2.xyz, v3.xyzx
                mov o0.xyzw, r0.xyzw
                mov o1.xyzw, r1.xyzw
                mov o2.xyz, r2.xyzx
                ret 
                // Approximately 60 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // NORMAL                   0   xyz         2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

