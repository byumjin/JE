//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer $Globals
{
    float   factor01;                   // Offset:    0, size:    4
    float   factor02;                   // Offset:    4, size:    4
    float   factor03;                   // Offset:    8, size:    4
    float   factor04;                   // Offset:   12, size:    4
    float   factor05;                   // Offset:   16, size:    4
    float   factor06;                   // Offset:   20, size:    4
    float   factor07;                   // Offset:   24, size:    4
}

cbuffer cbPerFrame
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
}

//
// 9 local object(s)
//
SamplerState TextureSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ShadowTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState TextureMipSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState LUTSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ObjTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(8);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D SceneMap;
Texture2D BasicColorMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 BloomTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, v2.xyxx
                mov r2.xyzw, v1.xyzw
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // TextureSampler                    sampler      NA          NA             s0      1 
                // SceneMap                          texture  float4          2d             t0      1 
                // BasicColorMap                     texture  float4          2d             t1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 3
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s0
                lt r0.w, l(1.000000), r0.x
                lt r2.x, l(1.000000), r0.y
                or r0.w, r0.w, r2.x
                lt r2.x, l(1.000000), r0.z
                or r0.w, r0.w, r2.x
                mov r2.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r2.xyz, r0.xyzx, r2.xyzx
                mov r2.w, l(1.000000)
                mul o0.xyzw, r1.xyzw, r2.xyzw
                retc_nz r0.w
                mov o0.xyzw, l(0,0,0,0)
                ret 
                // Approximately 14 instruction slots used
                            
            };
        }

    }

    technique11 GaussianVerticalTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, v2.xyxx
                mov r2.xyzw, v1.xyzw
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float factor01;                    // Offset:    0 Size:     4
                //   float factor02;                    // Offset:    4 Size:     4
                //   float factor03;                    // Offset:    8 Size:     4
                //   float factor04;                    // Offset:   12 Size:     4
                //   float factor05;                    // Offset:   16 Size:     4
                //   float factor06;                    // Offset:   20 Size:     4
                //   float factor07;                    // Offset:   24 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // TextureMipSampler                 sampler      NA          NA             s0      1 
                // SceneMap                          texture  float4          2d             t0      1 
                // $Globals                          cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 3
                mov r0.x, l(3)
                mov r1.xyzw, l(0,0,0,0)
                mov r2.x, -cb0[1].z
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.004430, 0.004430, 0.004430, 0.004430)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, -cb0[1].y
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.008958, 0.008958, 0.008958, 0.008958)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, -cb0[1].x
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.021596, 0.021596, 0.021596, 0.021596)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, -cb0[0].w
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.044368, 0.044368, 0.044368, 0.044368)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, -cb0[0].z
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.077674, 0.077674, 0.077674, 0.077674)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, -cb0[0].y
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.115877, 0.115877, 0.115877, 0.115877)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, -cb0[0].x
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.147308, 0.147308, 0.147308, 0.147308)
                add r1.xyzw, r1.xyzw, r2.xyzw
                itof r0.y, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0, r0.y
                mul r2.xyzw, r2.xyzw, l(0.159577, 0.159577, 0.159577, 0.159577)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, cb0[0].x
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.147308, 0.147308, 0.147308, 0.147308)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, cb0[0].y
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.115877, 0.115877, 0.115877, 0.115877)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, cb0[0].z
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.077674, 0.077674, 0.077674, 0.077674)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, cb0[0].w
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.044368, 0.044368, 0.044368, 0.044368)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, cb0[1].x
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.021596, 0.021596, 0.021596, 0.021596)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, cb0[1].y
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.008958, 0.008958, 0.008958, 0.008958)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, cb0[1].z
                mov r2.y, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.x, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.yzyy, t0.xyzw, s0, r0.x
                mul r0.xyzw, r0.xyzw, l(0.004430, 0.004430, 0.004430, 0.004430)
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul o0.xyzw, r0.xyzw, l(5.000000, 5.000000, 5.000000, 5.000000)
                ret 
                // Approximately 106 instruction slots used
                            
            };
        }

    }

    technique11 GaussianHeightTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, v2.xyxx
                mov r2.xyzw, v1.xyzw
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float factor01;                    // Offset:    0 Size:     4
                //   float factor02;                    // Offset:    4 Size:     4
                //   float factor03;                    // Offset:    8 Size:     4
                //   float factor04;                    // Offset:   12 Size:     4
                //   float factor05;                    // Offset:   16 Size:     4
                //   float factor06;                    // Offset:   20 Size:     4
                //   float factor07;                    // Offset:   24 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // TextureMipSampler                 sampler      NA          NA             s0      1 
                // SceneMap                          texture  float4          2d             t0      1 
                // $Globals                          cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 3
                mov r0.x, l(0)
                mov r1.xyzw, l(0,0,0,0)
                mov r2.y, -cb0[1].z
                mov r2.x, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.004430, 0.004430, 0.004430, 0.004430)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.y, -cb0[1].y
                mov r2.x, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.008958, 0.008958, 0.008958, 0.008958)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.y, -cb0[1].x
                mov r2.x, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.021596, 0.021596, 0.021596, 0.021596)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.y, -cb0[0].w
                mov r2.x, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.044368, 0.044368, 0.044368, 0.044368)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.y, -cb0[0].z
                mov r2.x, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.077674, 0.077674, 0.077674, 0.077674)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.y, -cb0[0].y
                mov r2.x, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.115877, 0.115877, 0.115877, 0.115877)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.y, -cb0[0].x
                mov r2.x, l(0)
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.147308, 0.147308, 0.147308, 0.147308)
                add r1.xyzw, r1.xyzw, r2.xyzw
                itof r0.y, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0, r0.y
                mul r2.xyzw, r2.xyzw, l(0.159577, 0.159577, 0.159577, 0.159577)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, l(0)
                mov r2.y, cb0[0].x
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.147308, 0.147308, 0.147308, 0.147308)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, l(0)
                mov r2.y, cb0[0].y
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.115877, 0.115877, 0.115877, 0.115877)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, l(0)
                mov r2.y, cb0[0].z
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.077674, 0.077674, 0.077674, 0.077674)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, l(0)
                mov r2.y, cb0[0].w
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.044368, 0.044368, 0.044368, 0.044368)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, l(0)
                mov r2.y, cb0[1].x
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.021596, 0.021596, 0.021596, 0.021596)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, l(0)
                mov r2.y, cb0[1].y
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.w, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
                mul r2.xyzw, r2.xyzw, l(0.008958, 0.008958, 0.008958, 0.008958)
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.x, l(0)
                mov r2.y, cb0[1].z
                add r0.yz, r2.xxyx, v1.xxyx
                itof r0.x, r0.x
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.yzyy, t0.xyzw, s0, r0.x
                mul r0.xyzw, r0.xyzw, l(0.004430, 0.004430, 0.004430, 0.004430)
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul o0.xyzw, r0.xyzw, l(5.000000, 5.000000, 5.000000, 5.000000)
                ret 
                // Approximately 106 instruction slots used
                            
            };
        }

    }

}

