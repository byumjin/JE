//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
    float4x4 gInvDepthViewProj;         // Offset:  128, size:   64
    float3  gWorldCenterPosition;       // Offset:  192, size:   12
    float3  gEyePosW;                   // Offset:  208, size:   12
    float   gEnvCubeMapCount;           // Offset:  220, size:    4
}

//
// 17 local object(s)
//
SamplerState TextureSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ShadowTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState TextureMipSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState LUTSampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState ObjTextureSampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    BorderColor = float4(0, 0, 0, 0);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(8);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D DiffuseMap;
TextureCube SkyBoxCubeMap;
Texture2D NormalMap;
Texture2D SpecularMap;
TextureCube EnvCubeMap01;
TextureCube EnvCubeMap02;
TextureCube EnvCubeMap03;
TextureCube EnvCubeMap04;
TextureCube EnvCubeMap05;
TextureCube EnvCubeMap06;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 ReflectionActorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float4x4 gInvDepthViewProj;        // Offset:  128 Size:    64 [unused]
                //   float3 gWorldCenterPosition;       // Offset:  192 Size:    12 [unused]
                //   float3 gEyePosW;                   // Offset:  208 Size:    12 [unused]
                //   float gEnvCubeMapCount;            // Offset:  220 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 r2.x, r0.xyzw, cb0[0].xyzw
                dp4 r2.y, r0.xyzw, cb0[1].xyzw
                dp4 r2.z, r0.xyzw, cb0[2].xyzw
                mov r0.xyzw, v1.xyzw
                mov r3.xy, v2.xyxx
                mov r4.xyz, v3.xyzx
                mov o0.xyzw, r1.xyzw
                mov o3.xyzw, r0.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r4.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // ObjTextureSampler                 sampler      NA          NA             s0      1 
                // DiffuseMap                        texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                sample_indexable(texture2d)(float,float,float,float) o0.xyzw, v4.xyxx, t0.xyzw, s0
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 SkyBoxTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float4x4 gInvDepthViewProj;        // Offset:  128 Size:    64 [unused]
                //   float3 gWorldCenterPosition;       // Offset:  192 Size:    12 [unused]
                //   float3 gEyePosW;                   // Offset:  208 Size:    12 [unused]
                //   float gEnvCubeMapCount;            // Offset:  220 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // COLOR                    0   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 r2.x, r0.xyzw, cb0[0].xyzw
                dp4 r2.y, r0.xyzw, cb0[1].xyzw
                dp4 r2.z, r0.xyzw, cb0[2].xyzw
                mov r0.xyzw, v1.xyzw
                mov r3.xy, v2.xyxx
                mov r4.xyz, v3.xyzx
                mov o0.xyzw, r1.xyzw
                mov o3.xyzw, r0.xyzw
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r4.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 18 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // SkyBoxCubeMap                     texture  float4        cube             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float       
                // COLOR                    0   xyzw        3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                dp3 r0.x, v1.xyzx, v1.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v1.xyzx
                itof r0.w, l(0)
                sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t0.xyzw, s0, r0.w
                mov o0.xyz, r0.xyzx
                mov o0.w, l(0)
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 CompositionCubeMapTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float4x4 gInvDepthViewProj;        // Offset:  128 Size:    64 [unused]
                //   float3 gWorldCenterPosition;       // Offset:  192 Size:    12 [unused]
                //   float3 gEyePosW;                   // Offset:  208 Size:    12 [unused]
                //   float gEnvCubeMapCount;            // Offset:  220 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 0   xy          5     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // NORMAL                   0   xyz         4     NONE   float   xyz 
                // TEXCOORD                 0   xy          5     NONE   float   xy  
                // COLOR                    0   xyzw        6     NONE   float   xyzw
                // TEXTURE                  0   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xyz
                dcl_input v4.xyzw
                dcl_input v5.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xy
                dcl_output o6.xyzw
                dcl_output o7.xyzw
                dcl_temps 7
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v3.xyzx, cb0[0].xyzx
                dp3 r2.y, v3.xyzx, cb0[1].xyzx
                dp3 r2.z, v3.xyzx, cb0[2].xyzx
                dp3 r3.x, v2.xyzx, cb0[0].xyzx
                dp3 r3.y, v2.xyzx, cb0[1].xyzx
                dp3 r3.z, v2.xyzx, cb0[2].xyzx
                dp3 r4.x, v1.xyzx, cb0[0].xyzx
                dp3 r4.y, v1.xyzx, cb0[1].xyzx
                dp3 r4.z, v1.xyzx, cb0[2].xyzx
                dp4 r5.x, r0.xyzw, cb0[4].xyzw
                dp4 r5.y, r0.xyzw, cb0[5].xyzw
                dp4 r5.z, r0.xyzw, cb0[6].xyzw
                dp4 r5.w, r0.xyzw, cb0[7].xyzw
                mov r0.xy, v5.xyxx
                mov r6.xyzw, v4.xyzw
                mov r5.xyzw, r5.xyzw
                mov o0.xyzw, r5.xyzw
                mov o6.xyzw, r6.xyzw
                mov o7.xyzw, r5.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r3.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xyz, r4.xyzx
                mov o5.xy, r0.xyxx
                ret 
                // Approximately 30 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64 [unused]
                //   float4x4 gInvDepthViewProj;        // Offset:  128 Size:    64
                //   float3 gWorldCenterPosition;       // Offset:  192 Size:    12 [unused]
                //   float3 gEyePosW;                   // Offset:  208 Size:    12
                //   float gEnvCubeMapCount;            // Offset:  220 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // ObjTextureSampler                 sampler      NA          NA             s0      1 
                // samAnisotropic                    sampler      NA          NA             s1      1 
                // NormalMap                         texture  float4          2d             t0      1 
                // SpecularMap                       texture  float4          2d             t1      1 
                // EnvCubeMap01                      texture  float4        cube             t2      1 
                // EnvCubeMap02                      texture  float4        cube             t3      1 
                // EnvCubeMap03                      texture  float4        cube             t4      1 
                // EnvCubeMap04                      texture  float4        cube             t5      1 
                // EnvCubeMap05                      texture  float4        cube             t6      1 
                // EnvCubeMap06                      texture  float4        cube             t7      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // BINORMAL                 0   xyz         3     NONE   float   xyz 
                // NORMAL                   0   xyz         4     NONE   float   xyz 
                // TEXCOORD                 0   xy          5     NONE   float   xy  
                // COLOR                    0   xyzw        6     NONE   float       
                // TEXTURE                  0   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_resource_texturecube (float,float,float,float) t4
                dcl_resource_texturecube (float,float,float,float) t5
                dcl_resource_texturecube (float,float,float,float) t6
                dcl_resource_texturecube (float,float,float,float) t7
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v5.xy
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 6
                sample_indexable(texture2d)(float,float,float,float) r0.x, v5.xyxx, t1.wxyz, s0
                mov r0.x, r0.x
                itof r0.y, l(7)
                log r0.x, r0.x
                mul r0.x, r0.x, l(0.250000)
                exp r0.x, r0.x
                mul r0.x, r0.x, r0.y
                dp3 r0.y, v4.xyzx, v4.xyzx
                rsq r0.y, r0.y
                mul r0.yzw, r0.yyyy, v4.xxyz
                dp3 r1.x, v2.xyzx, v2.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v2.xyzx
                dp3 r1.w, v3.xyzx, v3.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, v3.xyzx
                mov r0.yzw, r0.yyzw
                mov r1.xyz, r1.xyzx
                mov r2.xyz, r2.xyzx
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.xyxx, t0.xyzw, s0
                mov r3.xyz, r3.xyzx
                mov r4.x, r1.x
                mov r4.y, r2.x
                mov r4.z, r0.y
                mov r5.x, r1.y
                mov r5.y, r2.y
                mov r5.z, r0.z
                mov r0.y, r1.z
                mov r0.z, r2.z
                mov r0.w, r0.w
                mul r1.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r2.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r1.xyz, r1.xyzx, r2.xyzx
                dp3 r2.x, r1.xyzx, r4.xyzx
                dp3 r2.y, r1.xyzx, r5.xyzx
                dp3 r2.z, r1.xyzx, r0.yzwy
                mov r2.xyz, r2.xyzx
                mov r2.xyz, r2.xyzx
                dp3 r0.y, r2.xyzx, r2.xyzx
                rsq r0.y, r0.y
                mul r0.yzw, r0.yyyy, r2.xxyz
                dp4 r1.x, v7.xyzw, cb0[8].xyzw
                dp4 r1.y, v7.xyzw, cb0[9].xyzw
                dp4 r1.z, v7.xyzw, cb0[10].xyzw
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, cb0[13].xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                mov r2.xyz, -r1.xyzx
                dp3 r1.x, r1.xyzx, r0.yzwy
                max r1.x, r1.x, l(0.000000)
                min r1.x, r1.x, l(1.000000)
                mul r1.x, r1.x, l(2.000000)
                mul r0.yzw, r0.yyzw, r1.xxxx
                add r0.yzw, r0.yyzw, r2.xxyz
                dp3 r1.x, r0.yzwy, r0.yzwy
                rsq r1.x, r1.x
                mul r0.yzw, r0.yyzw, r1.xxxx
                mov r1.xyzw, l(0,0,0,0)
                ge r2.x, cb0[13].w, l(1.000000)
                if_nz r2.x
                  ge r2.x, cb0[13].w, l(2.000000)
                  if_nz r2.x
                    ge r2.x, cb0[13].w, l(3.000000)
                    if_nz r2.x
                      ge r2.x, cb0[13].w, l(4.000000)
                      if_nz r2.x
                        ge r2.x, cb0[13].w, l(5.000000)
                        if_nz r2.x
                          ge r2.x, cb0[13].w, l(6.000000)
                          if_nz r2.x
                            sample_l_indexable(texturecube)(float,float,float,float) r2.xyzw, r0.yzwy, t7.xyzw, s1, r0.x
                            ge r3.x, l(6.000000), cb0[13].w
                            mov r2.xyzw, r2.xyzw
                            lt r3.y, l(0.000000), r2.w
                            if_nz r3.y
                              mov r1.xyzw, r2.xyzw
                            endif 
                            movc r1.xyzw, r3.xxxx, r2.xyzw, r1.xyzw
                          endif 
                          sample_l_indexable(texturecube)(float,float,float,float) r2.xyzw, r0.yzwy, t6.xyzw, s1, r0.x
                          ge r3.x, l(5.000000), cb0[13].w
                          mov r2.xyzw, r2.xyzw
                          lt r3.y, l(0.000000), r2.w
                          if_nz r3.y
                            mov r1.xyzw, r2.xyzw
                          endif 
                          movc r1.xyzw, r3.xxxx, r2.xyzw, r1.xyzw
                        endif 
                        sample_l_indexable(texturecube)(float,float,float,float) r2.xyzw, r0.yzwy, t5.xyzw, s1, r0.x
                        ge r3.x, l(4.000000), cb0[13].w
                        mov r2.xyzw, r2.xyzw
                        lt r3.y, l(0.000000), r2.w
                        if_nz r3.y
                          mov r1.xyzw, r2.xyzw
                        endif 
                        movc r1.xyzw, r3.xxxx, r2.xyzw, r1.xyzw
                      endif 
                      sample_l_indexable(texturecube)(float,float,float,float) r2.xyzw, r0.yzwy, t4.xyzw, s1, r0.x
                      ge r3.x, l(3.000000), cb0[13].w
                      mov r2.xyzw, r2.xyzw
                      lt r3.y, l(0.000000), r2.w
                      if_nz r3.y
                        mov r1.xyzw, r2.xyzw
                      endif 
                      movc r1.xyzw, r3.xxxx, r2.xyzw, r1.xyzw
                    endif 
                    sample_l_indexable(texturecube)(float,float,float,float) r2.xyzw, r0.yzwy, t3.xyzw, s1, r0.x
                    ge r3.x, l(2.000000), cb0[13].w
                    mov r2.xyzw, r2.xyzw
                    lt r3.y, l(0.000000), r2.w
                    if_nz r3.y
                      mov r1.xyzw, r2.xyzw
                    endif 
                    movc r1.xyzw, r3.xxxx, r2.xyzw, r1.xyzw
                  endif 
                  sample_l_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.yzwy, t2.xyzw, s1, r0.x
                  ge r2.x, l(1.000000), cb0[13].w
                  mov r0.xyzw, r0.xyzw
                  lt r2.y, l(0.000000), r0.w
                  if_nz r2.y
                    mov r1.xyzw, r0.xyzw
                  endif 
                  movc r1.xyzw, r2.xxxx, r0.xyzw, r1.xyzw
                endif 
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 128 instruction slots used
                            
            };
        }

    }

}

